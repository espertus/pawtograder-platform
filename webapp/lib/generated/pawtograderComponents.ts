/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import * as reactQuery from '@tanstack/react-query';
import { usePawtograderContext, PawtograderContext } from './pawtograderContext';
import type * as Fetcher from './pawtograderFetcher';
import { pawtograderFetch } from './pawtograderFetcher';
import type * as Schemas from './pawtograderSchemas';

export type GetCanvasCoursesError = Fetcher.ErrorWrapper<undefined>;

export type GetCanvasCoursesResponse = Schemas.Course[];

export type GetCanvasCoursesVariables = PawtograderContext['fetcherOptions'];

export const fetchGetCanvasCourses = (variables: GetCanvasCoursesVariables, signal?: AbortSignal) =>
  pawtograderFetch<GetCanvasCoursesResponse, GetCanvasCoursesError, undefined, {}, {}, {}>({
    url: '/api/admin/canvas/courses',
    method: 'get',
    ...variables,
    signal,
  });

export const useGetCanvasCourses = <TData = GetCanvasCoursesResponse,>(
  variables: GetCanvasCoursesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetCanvasCoursesResponse, GetCanvasCoursesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePawtograderContext(options);
  return reactQuery.useQuery<GetCanvasCoursesResponse, GetCanvasCoursesError, TData>({
    queryKey: queryKeyFn({
      path: '/api/admin/canvas/courses',
      operationId: 'getCanvasCourses',
      variables,
    }),
    queryFn: ({ signal }) => fetchGetCanvasCourses({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetCanvasCoursePathParams = {
  /**
   * @format double
   */
  courseId: number;
};

export type GetCanvasCourseError = Fetcher.ErrorWrapper<undefined>;

export type GetCanvasCourseVariables = {
  pathParams: GetCanvasCoursePathParams;
} & PawtograderContext['fetcherOptions'];

export const fetchGetCanvasCourse = (variables: GetCanvasCourseVariables, signal?: AbortSignal) =>
  pawtograderFetch<
    Schemas.Course,
    GetCanvasCourseError,
    undefined,
    {},
    {},
    GetCanvasCoursePathParams
  >({ url: '/api/admin/canvas/courses/{courseId}', method: 'get', ...variables, signal });

export const useGetCanvasCourse = <TData = Schemas.Course,>(
  variables: GetCanvasCourseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Course, GetCanvasCourseError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePawtograderContext(options);
  return reactQuery.useQuery<Schemas.Course, GetCanvasCourseError, TData>({
    queryKey: queryKeyFn({
      path: '/api/admin/canvas/courses/{courseId}',
      operationId: 'getCanvasCourse',
      variables,
    }),
    queryFn: ({ signal }) => fetchGetCanvasCourse({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateAssignmentRepositoriesPathParams = {
  /**
   * @format double
   */
  courseId: number;
  /**
   * @format double
   */
  assignmentId: number;
};

export type CreateAssignmentRepositoriesError = Fetcher.ErrorWrapper<undefined>;

export type CreateAssignmentRepositoriesVariables = {
  pathParams: CreateAssignmentRepositoriesPathParams;
} & PawtograderContext['fetcherOptions'];

export const fetchCreateAssignmentRepositories = (
  variables: CreateAssignmentRepositoriesVariables,
  signal?: AbortSignal,
) =>
  pawtograderFetch<
    undefined,
    CreateAssignmentRepositoriesError,
    undefined,
    {},
    {},
    CreateAssignmentRepositoriesPathParams
  >({
    url: '/api/instructor/{courseId}/assignment/{assignmentId}/repositories',
    method: 'post',
    ...variables,
    signal,
  });

export const useCreateAssignmentRepositories = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAssignmentRepositoriesError,
      CreateAssignmentRepositoriesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = usePawtograderContext();
  return reactQuery.useMutation<
    undefined,
    CreateAssignmentRepositoriesError,
    CreateAssignmentRepositoriesVariables
  >({
    mutationFn: (variables: CreateAssignmentRepositoriesVariables) =>
      fetchCreateAssignmentRepositories({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SyncEnrollmentsPathParams = {
  /**
   * @format double
   */
  courseId: number;
};

export type SyncEnrollmentsError = Fetcher.ErrorWrapper<undefined>;

export type SyncEnrollmentsVariables = {
  pathParams: SyncEnrollmentsPathParams;
} & PawtograderContext['fetcherOptions'];

export const fetchSyncEnrollments = (variables: SyncEnrollmentsVariables, signal?: AbortSignal) =>
  pawtograderFetch<undefined, SyncEnrollmentsError, undefined, {}, {}, SyncEnrollmentsPathParams>({
    url: '/api/instructor/{courseId}/enrollments',
    method: 'post',
    ...variables,
    signal,
  });

export const useSyncEnrollments = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SyncEnrollmentsError, SyncEnrollmentsVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = usePawtograderContext();
  return reactQuery.useMutation<undefined, SyncEnrollmentsError, SyncEnrollmentsVariables>({
    mutationFn: (variables: SyncEnrollmentsVariables) =>
      fetchSyncEnrollments({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetTemplateReposPathParams = {
  /**
   * @format double
   */
  courseId: number;
};

export type GetTemplateReposError = Fetcher.ErrorWrapper<undefined>;

export type GetTemplateReposResponse = {
  security_and_analysis?: {
    secret_scanning_ai_detection?: {
      status?: 'enabled' | 'disabled';
    };
    secret_scanning_non_provider_patterns?: {
      status?: 'enabled' | 'disabled';
    };
    secret_scanning_push_protection?: {
      status?: 'enabled' | 'disabled';
    };
    secret_scanning?: {
      status?: 'enabled' | 'disabled';
    };
    dependabot_security_updates?: {
      status?: 'enabled' | 'disabled';
    };
    advanced_security?: {
      status?: 'enabled' | 'disabled';
    };
  };
  web_commit_signoff_required?: boolean;
  allow_forking?: boolean;
  /**
   * @format double
   */
  watchers?: number;
  /**
   * @format double
   */
  open_issues?: number;
  /**
   * @format double
   */
  forks?: number;
  license?: {
    node_id?: string;
    url?: string;
    spdx_id?: string;
    name?: string;
    key?: string;
  };
  code_of_conduct?: {
    html_url: string;
    body?: string;
    url: string;
    name: string;
    key: string;
  };
  /**
   * @format double
   */
  network_count?: number;
  /**
   * @format double
   */
  subscribers_count?: number;
  delete_branch_on_merge?: boolean;
  temp_clone_token?: string;
  role_name?: string;
  permissions?: {
    pull?: boolean;
    triage?: boolean;
    push?: boolean;
    maintain?: boolean;
    admin?: boolean;
  };
  updated_at?: string;
  created_at?: string;
  pushed_at?: string;
  visibility?: string;
  disabled?: boolean;
  archived?: boolean;
  has_discussions?: boolean;
  has_downloads?: boolean;
  has_pages?: boolean;
  has_wiki?: boolean;
  has_projects?: boolean;
  has_issues?: boolean;
  topics?: string[];
  is_template?: boolean;
  /**
   * @format double
   */
  open_issues_count?: number;
  default_branch?: string;
  /**
   * @format double
   */
  size?: number;
  /**
   * @format double
   */
  watchers_count?: number;
  /**
   * @format double
   */
  stargazers_count?: number;
  /**
   * @format double
   */
  forks_count?: number;
  language?: string;
  homepage?: string;
  svn_url?: string;
  hooks_url: string;
  mirror_url?: string;
  clone_url?: string;
  trees_url: string;
  teams_url: string;
  tags_url: string;
  subscription_url: string;
  subscribers_url: string;
  statuses_url: string;
  stargazers_url: string;
  ssh_url?: string;
  releases_url: string;
  pulls_url: string;
  notifications_url: string;
  milestones_url: string;
  merges_url: string;
  languages_url: string;
  labels_url: string;
  keys_url: string;
  issues_url: string;
  issue_events_url: string;
  issue_comment_url: string;
  git_url?: string;
  git_tags_url: string;
  git_refs_url: string;
  git_commits_url: string;
  forks_url: string;
  events_url: string;
  downloads_url: string;
  deployments_url: string;
  contributors_url: string;
  contents_url: string;
  compare_url: string;
  commits_url: string;
  comments_url: string;
  collaborators_url: string;
  branches_url: string;
  blobs_url: string;
  assignees_url: string;
  archive_url: string;
  url: string;
  fork: boolean;
  description: string;
  html_url: string;
  private: boolean;
  owner: {
    user_view_type?: string;
    starred_at?: string;
    site_admin: boolean;
    type: string;
    received_events_url: string;
    events_url: string;
    repos_url: string;
    organizations_url: string;
    subscriptions_url: string;
    starred_url: string;
    gists_url: string;
    following_url: string;
    followers_url: string;
    html_url: string;
    url: string;
    gravatar_id: string;
    avatar_url: string;
    node_id: string;
    /**
     * @format double
     */
    id: number;
    login: string;
    email?: string;
    name?: string;
  };
  full_name: string;
  name: string;
  node_id: string;
  /**
   * @format double
   */
  id: number;
}[];

export type GetTemplateReposVariables = {
  pathParams: GetTemplateReposPathParams;
} & PawtograderContext['fetcherOptions'];

export const fetchGetTemplateRepos = (variables: GetTemplateReposVariables, signal?: AbortSignal) =>
  pawtograderFetch<
    GetTemplateReposResponse,
    GetTemplateReposError,
    undefined,
    {},
    {},
    GetTemplateReposPathParams
  >({ url: '/api/instructor/{courseId}/template-repos', method: 'get', ...variables, signal });

export const useGetTemplateRepos = <TData = GetTemplateReposResponse,>(
  variables: GetTemplateReposVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTemplateReposResponse, GetTemplateReposError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePawtograderContext(options);
  return reactQuery.useQuery<GetTemplateReposResponse, GetTemplateReposError, TData>({
    queryKey: queryKeyFn({
      path: '/api/instructor/{courseId}/template-repos',
      operationId: 'getTemplateRepos',
      variables,
    }),
    queryFn: ({ signal }) => fetchGetTemplateRepos({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type CreateSubmissionHeaders = {
  Authorization: string;
};

export type CreateSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type CreateSubmissionVariables = {
  headers: CreateSubmissionHeaders;
} & PawtograderContext['fetcherOptions'];

export const fetchCreateSubmission = (variables: CreateSubmissionVariables, signal?: AbortSignal) =>
  pawtograderFetch<
    Schemas.SubmissionResponse,
    CreateSubmissionError,
    undefined,
    CreateSubmissionHeaders,
    {},
    {}
  >({ url: '/api/autograder/submission', method: 'post', ...variables, signal });

export const useCreateSubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionResponse,
      CreateSubmissionError,
      CreateSubmissionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = usePawtograderContext();
  return reactQuery.useMutation<
    Schemas.SubmissionResponse,
    CreateSubmissionError,
    CreateSubmissionVariables
  >({
    mutationFn: (variables: CreateSubmissionVariables) =>
      fetchCreateSubmission({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SubmitFeedbackHeaders = {
  Authorization: string;
};

export type SubmitFeedbackError = Fetcher.ErrorWrapper<undefined>;

export type SubmitFeedbackVariables = {
  body: Schemas.GradingScriptResult;
  headers: SubmitFeedbackHeaders;
} & PawtograderContext['fetcherOptions'];

export const fetchSubmitFeedback = (variables: SubmitFeedbackVariables, signal?: AbortSignal) =>
  pawtograderFetch<
    Schemas.GradeResponse,
    SubmitFeedbackError,
    Schemas.GradingScriptResult,
    SubmitFeedbackHeaders,
    {},
    {}
  >({ url: '/api/autograder/submission/feedback', method: 'post', ...variables, signal });

export const useSubmitFeedback = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GradeResponse,
      SubmitFeedbackError,
      SubmitFeedbackVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = usePawtograderContext();
  return reactQuery.useMutation<
    Schemas.GradeResponse,
    SubmitFeedbackError,
    SubmitFeedbackVariables
  >({
    mutationFn: (variables: SubmitFeedbackVariables) =>
      fetchSubmitFeedback({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CreateCourseForCanvasCoursePathParams = {
  /**
   * @format double
   */
  courseId: number;
};

export type CreateCourseForCanvasCourseError = Fetcher.ErrorWrapper<undefined>;

export type CreateCourseForCanvasCourseVariables = {
  pathParams: CreateCourseForCanvasCoursePathParams;
} & PawtograderContext['fetcherOptions'];

export const fetchCreateCourseForCanvasCourse = (
  variables: CreateCourseForCanvasCourseVariables,
  signal?: AbortSignal,
) =>
  pawtograderFetch<
    undefined,
    CreateCourseForCanvasCourseError,
    undefined,
    {},
    {},
    CreateCourseForCanvasCoursePathParams
  >({ url: '/api/admin/course/{courseId}', method: 'post', ...variables, signal });

export const useCreateCourseForCanvasCourse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateCourseForCanvasCourseError,
      CreateCourseForCanvasCourseVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = usePawtograderContext();
  return reactQuery.useMutation<
    undefined,
    CreateCourseForCanvasCourseError,
    CreateCourseForCanvasCourseVariables
  >({
    mutationFn: (variables: CreateCourseForCanvasCourseVariables) =>
      fetchCreateCourseForCanvasCourse({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: '/api/admin/canvas/courses';
      operationId: 'getCanvasCourses';
      variables: GetCanvasCoursesVariables;
    }
  | {
      path: '/api/admin/canvas/courses/{courseId}';
      operationId: 'getCanvasCourse';
      variables: GetCanvasCourseVariables;
    }
  | {
      path: '/api/instructor/{courseId}/template-repos';
      operationId: 'getTemplateRepos';
      variables: GetTemplateReposVariables;
    };
